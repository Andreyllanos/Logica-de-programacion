{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BlEerHvJP9W-"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "***¬øC√≥mo esta mi l√≥gica de programaci√≥n?***\n",
        "---\n",
        "***Ejercicio 1:*** Sistema de riego inteligente\n",
        "Una finca agr√≠cola desea automatizar el proceso de riego utilizando datos de humedad del suelo y pron√≥stico de lluvia. Se pide desarrollar un programa que analice los niveles de humedad diaria de una semana (expresados en porcentaje) y determine si es necesario activar el sistema de riego cada d√≠a. Para ello, el sistema debe considerar un umbral de humedad √≥ptima y un margen de seguridad definidos como constantes, y evitar regar si se pronostica lluvia. El programa deber√° recorrer los siete d√≠as de la semana con un bucle, aplicar condicionales para decidir cu√°ndo regar y mostrar un resumen final con el n√∫mero total de riegos realizados y el ahorro de agua estimado."
      ],
      "metadata": {
        "id": "SBlHRRtVP-GL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Range(7) , sirve para generar una secuencia de numeros\n",
        "# Float ,convierte un valor en numero decimal , porque por defecto el input es string\n",
        "#Append , es un metodo de listas que sirve para generar un elemento al final\n",
        "\n",
        "#entrada\n",
        "humedad_constante = 60 #humedad ideal\n",
        "humedad_minima = 55 #si es menos de esta humedad se debe acyivar el riego\n",
        "Maxdias_sinAgua = 2 # si pasan mas de 2 dias sin agua se debe activar el riego\n",
        "\n",
        "humedades = []\n",
        "for i in range(7):\n",
        "  valor = float(input(f\"Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA{i + 1}: \"))\n",
        "  humedades.append(valor)\n",
        "\n",
        "lluvia = []\n",
        "for i in range(7):\n",
        "  pronostico = input(f\"¬øLlovio el dia {i + 1}?(S/N):\").lower()\n",
        "  lluvia.append(pronostico == \"s\")\n",
        "\n",
        "dias_sin_humedad = 0\n",
        "riegos_realizados = 0\n",
        "\n",
        "for i in range(7):\n",
        "    print(f\"\\nD√≠a {i+1}: Humedad = {humedades[i]}%, Lluvia = {lluvia[i]}\")\n",
        "\n",
        "    if humedades[i] < humedad_minima:\n",
        "        dias_sin_humedad += 1\n",
        "    else:\n",
        "        dias_sin_humedad = 0  #se reinicia si un d√≠a tiene buena humedad\n",
        "\n",
        "    if dias_sin_humedad >= Maxdias_sinAgua and not lluvia[i]:\n",
        "        print(\"‚Üí Activar riego üíß\")\n",
        "        riegos_realizados += 1\n",
        "        dias_sin_humedad = 0  #se reinicia despu√©s del riego\n",
        "    else:\n",
        "        print(\"‚Üí No se riega üå¶Ô∏è\")\n",
        "\n",
        "print(\"\\n===== RESUMEN FINAL =====\")\n",
        "print(f\"Total de riegos realizados: {riegos_realizados}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qwxIgYFbUPU3",
        "outputId": "2fedf507-9fdf-4b48-d877-d1742bf64f94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA1: 55\n",
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA2: 66\n",
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA3: 41\n",
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA4: 10\n",
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA5: 11\n",
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA6: 12\n",
            "Ingrese la humedad en el d√≠a en un porcentaje del 10% al 100% :DIA7: 23\n",
            "¬øLlovio el dia 1?(S/N):1\n",
            "¬øLlovio el dia 2?(S/N):s\n",
            "¬øLlovio el dia 3?(S/N):n\n",
            "¬øLlovio el dia 4?(S/N):s\n",
            "¬øLlovio el dia 5?(S/N):n\n",
            "¬øLlovio el dia 6?(S/N):s\n",
            "¬øLlovio el dia 7?(S/N):n\n",
            "\n",
            "D√≠a 1: Humedad = 55.0%, Lluvia = False\n",
            "‚Üí No se riega üå¶Ô∏è\n",
            "\n",
            "D√≠a 2: Humedad = 66.0%, Lluvia = True\n",
            "‚Üí No se riega üå¶Ô∏è\n",
            "\n",
            "D√≠a 3: Humedad = 41.0%, Lluvia = False\n",
            "‚Üí No se riega üå¶Ô∏è\n",
            "\n",
            "D√≠a 4: Humedad = 10.0%, Lluvia = True\n",
            "‚Üí No se riega üå¶Ô∏è\n",
            "\n",
            "D√≠a 5: Humedad = 11.0%, Lluvia = False\n",
            "‚Üí Activar riego üíß\n",
            "\n",
            "D√≠a 6: Humedad = 12.0%, Lluvia = True\n",
            "‚Üí No se riega üå¶Ô∏è\n",
            "\n",
            "D√≠a 7: Humedad = 23.0%, Lluvia = False\n",
            "‚Üí Activar riego üíß\n",
            "\n",
            "===== RESUMEN FINAL =====\n",
            "Total de riegos realizados: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Ejercicio 2:*** Clasificaci√≥n de calidad de cosecha\n",
        "Una cooperativa frut√≠cola necesita clasificar sus lotes de frutas seg√∫n la calidad, en base al peso promedio y al porcentaje de piezas defectuosas. Se requiere crear un programa que, para varios lotes ingresados por el usuario, calcule el peso promedio de una muestra y determine el porcentaje de defectos. En funci√≥n de estos valores, el sistema debe asignar una categor√≠a: ‚ÄúA‚Äù para productos de alta calidad, ‚ÄúB‚Äù para calidad media y ‚ÄúRechazo‚Äù para los que no cumplen los est√°ndares. El programa debe usar funciones para los c√°lculos, bucles para procesar varios lotes y condicionales para establecer la categor√≠a final, mostrando un reporte con los resultados.\n",
        "\n",
        "***problema :*** Se quiere analizar varios lotes de fruta y cada lote se debe:\n",
        "-calcular el peso promedio de las frutas\n",
        "-calcular el porcentaje  de defectos(frutas malas)\n",
        "-asignar una categoria (A:peso promedio alto y pocos defectos., B:calidad media , Rechazo:peso bajo y muchos defectos)"
      ],
      "metadata": {
        "id": "kitTeN4wes3G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#funciones\n",
        "def calcular_promedio(pesos):\n",
        "    \"\"\"Calcula el peso promedio de una lista de frutas\"\"\"\n",
        "    return sum(pesos) / len(pesos)\n",
        "\n",
        "def calcular_defectos(defectuosas, total):\n",
        "    \"\"\"Calcula el porcentaje de frutas defectuosas\"\"\"\n",
        "    return (defectuosas / total) * 100\n",
        "\n",
        "def clasificar(peso_prom, defectos):\n",
        "    \"\"\"Asigna categor√≠a de calidad seg√∫n peso y defectos\"\"\"\n",
        "    if peso_prom >= 150 and defectos < 10:\n",
        "        return \"A\"       # Alta calidad\n",
        "    elif peso_prom >= 100 and defectos < 20:\n",
        "        return \"B\"       # Calidad media\n",
        "    else:\n",
        "        return \"Rechazo\" # No cumple est√°ndares\n",
        "\n",
        "\n",
        "num_lotes = int(input(\"¬øCu√°ntos lotes deseas analizar? \"))\n",
        "\n",
        "# Listas para guardar los resultados generales\n",
        "resultados = []\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "for i in range(num_lotes):\n",
        "    print(f\"\\n--- Lote {i+1} ---\")\n",
        "\n",
        "    total_frutas = int(input(\"N√∫mero total de frutas en la muestra: \"))\n",
        "\n",
        "    pesos = []\n",
        "    for j in range(total_frutas):\n",
        "        peso = float(input(f\"Peso de la fruta {j+1} (en gramos): \"))\n",
        "        pesos.append(peso)\n",
        "\n",
        "    defectuosas = int(input(\"¬øCu√°ntas frutas est√°n defectuosas? \"))\n",
        "\n",
        "    peso_prom = calcular_promedio(pesos)\n",
        "    defectos = calcular_defectos(defectuosas, total_frutas)\n",
        "    categoria = clasificar(peso_prom, defectos)\n",
        "\n",
        "\n",
        "    resultados.append({\n",
        "        \"Lote\": i + 1,\n",
        "        \"Peso promedio\": peso_prom,\n",
        "        \"Defectos (%)\": defectos,\n",
        "        \"Categor√≠a\": categoria\n",
        "    })\n",
        "\n",
        "#reporte final\n",
        "print(\"\\n===== REPORTE GENERAL DE LOTES =====\")\n",
        "for r in resultados:\n",
        "    print(f\"\\nLote {r['Lote']}:\")\n",
        "    print(f\"  Peso promedio: {r['Peso promedio']:.2f} g\")\n",
        "    print(f\"  Porcentaje de defectos: {r['Defectos (%)']:.1f}%\")\n",
        "    print(f\"  Categor√≠a asignada: {r['Categor√≠a']}\")\n",
        "\n",
        "print(\"\\n‚úÖ An√°lisis completado con √©xito.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VxCYvTLgr_IA",
        "outputId": "3e67792a-869f-4213-fccb-05214f8543c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬øCu√°ntos lotes deseas analizar? 2\n",
            "\n",
            "--- Lote 1 ---\n",
            "N√∫mero total de frutas en la muestra: 2\n",
            "Peso de la fruta 1 (en gramos): 2000\n",
            "Peso de la fruta 2 (en gramos): 5000\n",
            "¬øCu√°ntas frutas est√°n defectuosas? 1\n",
            "\n",
            "--- Lote 2 ---\n",
            "N√∫mero total de frutas en la muestra: 2\n",
            "Peso de la fruta 1 (en gramos): 2000\n",
            "Peso de la fruta 2 (en gramos): 2500\n",
            "¬øCu√°ntas frutas est√°n defectuosas? 5\n",
            "\n",
            "===== REPORTE GENERAL DE LOTES =====\n",
            "\n",
            "Lote 1:\n",
            "  Peso promedio: 3500.00 g\n",
            "  Porcentaje de defectos: 50.0%\n",
            "  Categor√≠a asignada: Rechazo\n",
            "\n",
            "Lote 2:\n",
            "  Peso promedio: 2250.00 g\n",
            "  Porcentaje de defectos: 250.0%\n",
            "  Categor√≠a asignada: Rechazo\n",
            "\n",
            "‚úÖ An√°lisis completado con √©xito.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Ejercicio 3:***  Planificaci√≥n de rotaci√≥n de cultivos\n",
        "Un ingeniero agr√≥nomo busca dise√±ar una herramienta que ayude a planificar la rotaci√≥n de cultivos durante el a√±o y calcular el consumo total de nitr√≥geno (N) en el suelo. El programa deber√° recibir una lista con los cultivos sembrados cada mes (por ejemplo, ma√≠z, soya, trigo o descanso) y usar constantes que indiquen el consumo mensual de nitr√≥geno por cultivo. Mediante funciones, el sistema debe sumar el consumo total de N y verificar si existen m√°s de tres meses consecutivos del mismo cultivo, recomendando alternar con un cultivo diferente o un per√≠odo de descanso.\n"
      ],
      "metadata": {
        "id": "zEi1ewQuyD4q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#constantes\n",
        "CONSUMO_N = {\n",
        "    \"maiz\": 30,\n",
        "    \"soya\": 20,\n",
        "    \"trigo\": 25,\n",
        "    \"descanso\": 0\n",
        "}\n",
        "\n",
        "# funci√≥n para calcular consumo total\n",
        "def calcular_consumo_total(cultivos):\n",
        "    total = 0\n",
        "    for cultivo in cultivos:\n",
        "        total += CONSUMO_N.get(cultivo.lower(), 0)\n",
        "    return total\n",
        "\n",
        "# funci√≥n para verificar rotacion\n",
        "def verificar_rotacion(cultivos):\n",
        "    consecutivos = 1\n",
        "    for i in range(1, len(cultivos)):\n",
        "        if cultivos[i].lower() == cultivos[i-1].lower():\n",
        "            consecutivos += 1\n",
        "            if consecutivos > 3:\n",
        "                return f\"‚ö†Ô∏è Atenci√≥n: Hay m√°s de 3 meses seguidos de {cultivos[i].capitalize()}. Se recomienda alternar o descansar el suelo.\"\n",
        "        else:\n",
        "            consecutivos = 1\n",
        "    return \"‚úÖ Buena rotaci√≥n de cultivos durante el a√±o.\"\n",
        "\n",
        "print(\"Planificador de Rotaci√≥n de Cultivos üåæ\")\n",
        "cultivos = []\n",
        "\n",
        "\n",
        "for i in range(5):\n",
        "    cultivo = input(f\"Ingrese el cultivo del mes {i+1} (maiz, soya, trigo o descanso): \")\n",
        "    cultivos.append(cultivo)\n",
        "\n",
        "total_n = calcular_consumo_total(cultivos)\n",
        "mensaje_rotacion = verificar_rotacion(cultivos)\n",
        "\n",
        "print(\"\\n--- RESULTADOS ---\")\n",
        "print(f\"Consumo total de nitr√≥geno anual: {total_n} unidades\")\n",
        "print(mensaje_rotacion)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B11KyIIx0UAP",
        "outputId": "e6a2dd43-44b6-4412-b0bf-9e915cf0e702"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Planificador de Rotaci√≥n de Cultivos üåæ\n",
            "Ingrese el cultivo del mes 1 (maiz, soya, trigo o descanso): 2\n",
            "Ingrese el cultivo del mes 2 (maiz, soya, trigo o descanso): descanso\n",
            "Ingrese el cultivo del mes 3 (maiz, soya, trigo o descanso): trigo\n",
            "Ingrese el cultivo del mes 4 (maiz, soya, trigo o descanso): trigo\n",
            "Ingrese el cultivo del mes 5 (maiz, soya, trigo o descanso): descanso\n",
            "\n",
            "--- RESULTADOS ---\n",
            "Consumo total de nitr√≥geno anual: 50 unidades\n",
            "‚úÖ Buena rotaci√≥n de cultivos durante el a√±o.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Ejercicio 4:*** Control de inventario de un software agr√≠cola\n",
        "Una empresa que desarrolla software para el agro necesita un m√≥dulo que controle el inventario de insumos (fertilizantes, semillas, pesticidas). El programa debe permitir registrar la cantidad inicial de cada producto y simular la salida de unidades seg√∫n las ventas semanales. Con el uso de bucles y condicionales, el sistema debe actualizar los valores y emitir una alerta cuando alg√∫n producto quede por debajo de un nivel m√≠nimo definido como constante. Adem√°s, se debe incluir una funci√≥n que calcule el valor total del inventario restante y muestre un reporte con el stock actualizada"
      ],
      "metadata": {
        "id": "N8Wg6GlHg96q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#constante para saber el nivel m√≠nimo de alerta\n",
        "NIVEL_MINIMO = 10\n",
        "\n",
        "#calcular el valor total del inventario\n",
        "def calcular_valor_total(inventario, precios):\n",
        "    total = 0\n",
        "    for producto in inventario:\n",
        "        total += inventario[producto] * precios[producto]\n",
        "    return total\n",
        "\n",
        "\n",
        "inventario = {}\n",
        "precios = {}\n",
        "\n",
        "num_productos = int(input(\"Ingrese el n√∫mero de productos a registrar: \"))\n",
        "\n",
        "#registro de los productos\n",
        "for i in range(num_productos):\n",
        "    nombre = input(f\"\\nNombre del producto {i+1}: \")\n",
        "    cantidad = int(input(f\"Cantidad inicial de {nombre}: \"))\n",
        "    precio = float(input(f\"Precio por unidad de {nombre}: \"))\n",
        "    inventario[nombre] = cantidad\n",
        "    precios[nombre] = precio\n",
        "\n",
        "\n",
        "num_semanas = int(input(\"Ingrese las semnas de produccion: \"))\n",
        "for semana in range(num_semanas):\n",
        "    print(f\"\\nüìÖ Semana {semana}\")\n",
        "    for producto in inventario:\n",
        "        venta = int(input(f\"Unidades vendidas de {producto}: \"))\n",
        "        inventario[producto] -= venta\n",
        "\n",
        "\n",
        "        if inventario[producto] <= NIVEL_MINIMO:\n",
        "            print(f\"‚ö†Ô∏è Alerta: ¬°El producto '{producto}' tiene stock bajo! ({inventario[producto]} unidades restantes)\")\n",
        "\n",
        "#reporte final\n",
        "print(\"\\n===== üì¶ REPORTE FINAL DEL INVENTARIO =====\")\n",
        "for producto in inventario:\n",
        "    print(f\"{producto}: {inventario[producto]} unidades restantes\")\n",
        "\n",
        "valor_total = calcular_valor_total(inventario, precios)\n",
        "print(f\"\\nüí∞ Valor total del inventario restante: ${valor_total:,.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fi5Q11C9g9kA",
        "outputId": "8842bf3a-6294-48fe-f270-198fc1653689"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ingrese el n√∫mero de productos a registrar: 2\n",
            "\n",
            "Nombre del producto 1: arroz\n",
            "Cantidad inicial de arroz: 10\n",
            "Precio por unidad de arroz: 2000\n",
            "\n",
            "Nombre del producto 2: pollo\n",
            "Cantidad inicial de pollo: 10\n",
            "Precio por unidad de pollo: 2500\n",
            "Ingrese las semnas de produccion: 2\n",
            "\n",
            "üìÖ Semana 0\n",
            "Unidades vendidas de arroz: 3\n",
            "‚ö†Ô∏è Alerta: ¬°El producto 'arroz' tiene stock bajo! (7 unidades restantes)\n",
            "Unidades vendidas de pollo: 5\n",
            "‚ö†Ô∏è Alerta: ¬°El producto 'pollo' tiene stock bajo! (5 unidades restantes)\n",
            "\n",
            "üìÖ Semana 1\n",
            "Unidades vendidas de arroz: 2\n",
            "‚ö†Ô∏è Alerta: ¬°El producto 'arroz' tiene stock bajo! (5 unidades restantes)\n",
            "Unidades vendidas de pollo: 2\n",
            "‚ö†Ô∏è Alerta: ¬°El producto 'pollo' tiene stock bajo! (3 unidades restantes)\n",
            "\n",
            "===== üì¶ REPORTE FINAL DEL INVENTARIO =====\n",
            "arroz: 5 unidades restantes\n",
            "pollo: 3 unidades restantes\n",
            "\n",
            "üí∞ Valor total del inventario restante: $17,500.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Ejercicio 5:***  Evaluaci√≥n de desempe√±o de maquinaria\n",
        "Una cooperativa agr√≠cola quiere medir el rendimiento de sus tractores en campo. Crea un programa que permita ingresar los datos de varios tractores: horas trabajadas, litros de combustible consumidos y superficie cubierta. El programa debe calcular el rendimiento por hora y el consumo de combustible por hect√°rea. Mediante condicionales, debe clasificar el desempe√±o como ‚ÄúExcelente‚Äù, ‚ÄúAceptable‚Äù o ‚ÄúDeficiente‚Äù, seg√∫n los valores obtenidos. Usa funciones para los c√°lculos, bucles para procesar varios tractores y constantes para los l√≠mites de clasificaci√≥n. Finalmente, muestra un informe con los resultados de cada m√°quina."
      ],
      "metadata": {
        "id": "g1TZvpvZnWmD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "LIMITE_EXCELENTE = 1.0   #litros por hect√°rea (menor consumo = mejor)\n",
        "LIMITE_ACEPTABLE = 2.0   #litros por hect√°rea\n",
        "HORAS_MINIMAS_EXCELENTE = 5  # horas trabajadas para ser considerado excelente\n",
        "\n",
        "\n",
        "def calcular_rendimiento(superficie, horas):\n",
        "    return superficie / horas if horas > 0 else 0\n",
        "\n",
        "\n",
        "def calcular_consumo_por_hectarea(litros, superficie):\n",
        "    return litros / superficie if superficie > 0 else 0\n",
        "\n",
        "\n",
        "def clasificar_desempeno(rendimiento, consumo, horas):\n",
        "    if consumo <= LIMITE_EXCELENTE and rendimiento > 2 and horas >= HORAS_MINIMAS_EXCELENTE:\n",
        "        return \"Excelente\"\n",
        "    elif consumo <= LIMITE_ACEPTABLE and rendimiento >= 1:\n",
        "        return \"Aceptable\"\n",
        "    else:\n",
        "        return \"Deficiente\"\n",
        "\n",
        "\n",
        "tractores = []  #lista para guardar la informaci√≥n de cada tractor\n",
        "\n",
        "n = int(input(\"¬øCu√°ntos tractores desea evaluar?: \"))\n",
        "\n",
        "for i in range(n):\n",
        "    print(f\"\\nüöú Tractor #{i+1}\")\n",
        "    horas = float(input(\"Horas trabajadas: \"))\n",
        "    litros = float(input(\"Litros de combustible consumidos: \"))\n",
        "    superficie = float(input(\"Superficie cubierta (hect√°reas): \"))\n",
        "\n",
        "    rendimiento = calcular_rendimiento(superficie, horas)\n",
        "    consumo = calcular_consumo_por_hectarea(litros, superficie)\n",
        "    desempeno = clasificar_desempeno(rendimiento, consumo, horas)\n",
        "\n",
        "    tractores.append({\n",
        "        \"Tractor\": i + 1,\n",
        "        \"Rendimiento (ha/h)\": round(rendimiento, 2),\n",
        "        \"Consumo (L/ha)\": round(consumo, 2),\n",
        "        \"Clasificaci√≥n\": desempeno\n",
        "    })\n",
        "\n",
        "# reporte final\n",
        "print(\"\\nüìã INFORME DE DESEMPE√ëO\")\n",
        "for t in tractores:\n",
        "    print(f\"\\nTractor #{t['Tractor']}\")\n",
        "    print(f\" - Rendimiento: {t['Rendimiento (ha/h)']} ha/h\")\n",
        "    print(f\" - Consumo: {t['Consumo (L/ha)']} L/ha\")\n",
        "    print(f\" - Desempe√±o: {t['Clasificaci√≥n']}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PSgYwV_erVTd",
        "outputId": "cd48d5fb-71f2-4aea-c5b0-21b7766f891f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬øCu√°ntos tractores desea evaluar?: 4\n",
            "\n",
            "üöú Tractor #1\n",
            "Horas trabajadas: 5\n",
            "Litros de combustible consumidos: 3\n",
            "Superficie cubierta (hect√°reas): 8\n",
            "\n",
            "üöú Tractor #2\n",
            "Horas trabajadas: 4\n",
            "Litros de combustible consumidos: 1\n",
            "Superficie cubierta (hect√°reas): 4\n",
            "\n",
            "üöú Tractor #3\n",
            "Horas trabajadas: 7\n",
            "Litros de combustible consumidos: 5\n",
            "Superficie cubierta (hect√°reas): 3\n",
            "\n",
            "üöú Tractor #4\n",
            "Horas trabajadas: 5\n",
            "Litros de combustible consumidos: 3\n",
            "Superficie cubierta (hect√°reas): 3\n",
            "\n",
            "üìã INFORME DE DESEMPE√ëO\n",
            "\n",
            "Tractor #1\n",
            " - Rendimiento: 1.6 ha/h\n",
            " - Consumo: 0.38 L/ha\n",
            " - Desempe√±o: Aceptable\n",
            "\n",
            "Tractor #2\n",
            " - Rendimiento: 1.0 ha/h\n",
            " - Consumo: 0.25 L/ha\n",
            " - Desempe√±o: Aceptable\n",
            "\n",
            "Tractor #3\n",
            " - Rendimiento: 0.43 ha/h\n",
            " - Consumo: 1.67 L/ha\n",
            " - Desempe√±o: Deficiente\n",
            "\n",
            "Tractor #4\n",
            " - Rendimiento: 0.6 ha/h\n",
            " - Consumo: 1.0 L/ha\n",
            " - Desempe√±o: Deficiente\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kkP_9aXMrcGW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "üß† ***Ejercicio 1:*** Gesti√≥n de energ√≠a en un edificio inteligente\n",
        "Un edificio moderno cuenta con sensores que registran el consumo energ√©tico diario (en kWh) de tres √°reas: oficinas, pasillos y estacionamiento.\n",
        "Crea un programa que:\n",
        "\n",
        "Lea los consumos diarios de una semana para cada √°rea.\n",
        "\n",
        "Calcule el promedio semanal por √°rea y el total general.\n",
        "\n",
        "Detecte el d√≠a de mayor consumo global y recomiende medidas de ahorro si el promedio total supera un umbral definido como constante.\n",
        "El programa debe usar listas anidadas, bucles y funciones para los c√°lculos, y generar un reporte con todos los resultados."
      ],
      "metadata": {
        "id": "V_yJ2gsVyU-9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "UMBRAL_AHORRO = 500  #constante para recomendar ahorro\n",
        "\n",
        "\n",
        "def promedio_semana(consumos):\n",
        "    return sum(consumos) / len(consumos)\n",
        "\n",
        "def consumo_diario_total(consumos_areas, dia):\n",
        "    return sum(consumos_areas[area][dia] for area in consumos_areas)\n",
        "\n",
        "\n",
        "areas = [\"Oficinas\", \"Pasillos\", \"Estacionamiento\"]\n",
        "consumos = {area: [] for area in areas}\n",
        "\n",
        "# Pedir consumos por d√≠a\n",
        "for area in areas:\n",
        "    print(f\"\\nIngrese el consumo diario de {area} (kWh):\")\n",
        "    for dia in range(7):\n",
        "        valor = float(input(f\"  D√≠a {dia+1}: \"))\n",
        "        consumos[area].append(valor)\n",
        "\n",
        "\n",
        "promedios = {area: promedio_semana(consumos[area]) for area in areas}\n",
        "total_semanal = sum(sum(consumos[area]) for area in areas)\n",
        "\n",
        "# Detectar el d√≠a de mayor consumo global\n",
        "consumo_dia = [consumo_diario_total(consumos, dia) for dia in range(7)]\n",
        "dia_max = consumo_dia.index(max(consumo_dia)) + 1  # +1 para que sea d√≠a 1..7\n",
        "\n",
        "# --- Reporte ---\n",
        "print(\"\\n===== REPORTE DE CONSUMO ENERG√âTICO =====\")\n",
        "for area in areas:\n",
        "    print(f\"{area}: promedio semanal = {promedios[area]:.2f} kWh\")\n",
        "print(f\"\\nConsumo total de la semana: {total_semanal:.2f} kWh\")\n",
        "print(f\"D√≠a de mayor consumo global: D√≠a {dia_max} ({consumo_dia[dia_max-1]:.2f} kWh)\")\n",
        "\n",
        "if total_semanal / 7 > UMBRAL_AHORRO:\n",
        "    print(\"\\n‚ö†Ô∏è Se recomienda implementar medidas de ahorro energ√©tico: apagar luces no usadas, optimizar HVAC, sensores inteligentes.\")\n",
        "else:\n",
        "    print(\"\\n‚úÖ Consumo dentro del rango esperado. No se requieren medidas adicionales.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z7xfhDlFybZ8",
        "outputId": "07b3b555-3408-4a8a-8325-a5439b36775f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Ingrese el consumo diario de Oficinas (kWh):\n",
            "  D√≠a 1: 50\n",
            "  D√≠a 2: 62\n",
            "  D√≠a 3: 96\n",
            "  D√≠a 4: 22\n",
            "  D√≠a 5: 10\n",
            "  D√≠a 6: 2\n",
            "  D√≠a 7: 99\n",
            "\n",
            "Ingrese el consumo diario de Pasillos (kWh):\n",
            "  D√≠a 1: 56\n",
            "  D√≠a 2: 56\n",
            "  D√≠a 3: 56\n",
            "  D√≠a 4: 56\n",
            "  D√≠a 5: 6556\n",
            "  D√≠a 6: 46\n",
            "  D√≠a 7: 56\n",
            "\n",
            "Ingrese el consumo diario de Estacionamiento (kWh):\n",
            "  D√≠a 1: 56\n",
            "  D√≠a 2: 65\n",
            "  D√≠a 3: 89\n",
            "  D√≠a 4: 98\n",
            "  D√≠a 5: 88\n",
            "  D√≠a 6: 78\n",
            "  D√≠a 7: 99\n",
            "\n",
            "===== REPORTE DE CONSUMO ENERG√âTICO =====\n",
            "Oficinas: promedio semanal = 48.71 kWh\n",
            "Pasillos: promedio semanal = 983.14 kWh\n",
            "Estacionamiento: promedio semanal = 81.86 kWh\n",
            "\n",
            "Consumo total de la semana: 7796.00 kWh\n",
            "D√≠a de mayor consumo global: D√≠a 5 (6654.00 kWh)\n",
            "\n",
            "‚ö†Ô∏è Se recomienda implementar medidas de ahorro energ√©tico: apagar luces no usadas, optimizar HVAC, sensores inteligentes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "üé¨ ***Ejercicio 2:*** Sistema de recomendaci√≥n de pel√≠culas personalizadas\n",
        "Dise√±a un programa que ayude a recomendar pel√≠culas a los usuarios de una plataforma de streaming.\n",
        "Cada usuario ingresa su edad, g√©nero favorito y las calificaciones que ha dado a sus √∫ltimas pel√≠culas vistas.\n",
        "El sistema debe:\n",
        "\n",
        "Calcular el promedio de calificaciones del usuario.\n",
        "\n",
        "Recomendar un tipo de pel√≠cula seg√∫n su edad y gustos (usando condicionales anidados).\n",
        "\n",
        "Ajustar la recomendaci√≥n si el promedio de calificaciones es bajo, sugiriendo g√©neros alternativos.\n",
        "Debe usarse una funci√≥n para generar la recomendaci√≥n y un bucle para procesar varios usuarios."
      ],
      "metadata": {
        "id": "ecael4-zzM_w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def promedio_calificaciones(calificaciones):\n",
        "    return sum(calificaciones) / len(calificaciones) if calificaciones else 0\n",
        "\n",
        "def recomendar_pelicula(edad, genero_fav, promedio):\n",
        "    if edad < 13:\n",
        "        # Ni√±os\n",
        "        if promedio >= 4:\n",
        "            return f\"Recomendaci√≥n: Pel√≠culas de {genero_fav} para ni√±os\"\n",
        "        else:\n",
        "            return \"Recomendaci√≥n: Animaci√≥n o pel√≠culas educativas\"\n",
        "    elif 13 <= edad <= 17:\n",
        "        # Adolescentes\n",
        "        if promedio >= 4:\n",
        "            return f\"Recomendaci√≥n: Pel√≠culas de {genero_fav} para adolescentes\"\n",
        "        else:\n",
        "            return \"Recomendaci√≥n: Comedia o aventuras populares\"\n",
        "    else:\n",
        "        # Adultos\n",
        "        if promedio >= 4:\n",
        "            return f\"Recomendaci√≥n: Pel√≠culas de {genero_fav} para adultos\"\n",
        "        else:\n",
        "            return \"Recomendaci√≥n: Drama, thriller o documentales\"\n",
        "\n",
        "usuarios = int(input(\"¬øCu√°ntos usuarios desea procesar?: \"))\n",
        "\n",
        "for i in range(usuarios):\n",
        "    print(f\"\\n--- Usuario #{i+1} ---\")\n",
        "    edad = int(input(\"Edad: \"))\n",
        "    genero_fav = input(\"G√©nero favorito: \")\n",
        "\n",
        "    # Pedir calificaciones de las √∫ltimas pel√≠culas\n",
        "    calificaciones = []\n",
        "    num_pelis = int(input(\"¬øCu√°ntas pel√≠culas calific√≥ recientemente?: \"))\n",
        "    for j in range(num_pelis):\n",
        "        cal = float(input(f\"Calificaci√≥n pel√≠cula {j+1} (0-5): \"))\n",
        "        calificaciones.append(cal)\n",
        "\n",
        "    promedio = promedio_calificaciones(calificaciones)\n",
        "    recomendacion = recomendar_pelicula(edad, genero_fav, promedio)\n",
        "\n",
        "    print(f\"\\nPromedio de calificaciones: {promedio:.2f}\")\n",
        "    print(recomendacion)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tNifwHnGzQhH",
        "outputId": "35bf411a-c410-4bff-a74d-f6fc3be8d84f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬øCu√°ntos usuarios desea procesar?: 3\n",
            "\n",
            "--- Usuario #1 ---\n",
            "Edad: 12\n",
            "G√©nero favorito: terror\n",
            "¬øCu√°ntas pel√≠culas calific√≥ recientemente?: 2\n",
            "Calificaci√≥n pel√≠cula 1 (0-5): 5\n",
            "Calificaci√≥n pel√≠cula 2 (0-5): 2\n",
            "\n",
            "Promedio de calificaciones: 3.50\n",
            "Recomendaci√≥n: Animaci√≥n o pel√≠culas educativas\n",
            "\n",
            "--- Usuario #2 ---\n",
            "Edad: 88\n",
            "G√©nero favorito: gladiadores\n",
            "¬øCu√°ntas pel√≠culas calific√≥ recientemente?: 2\n",
            "Calificaci√≥n pel√≠cula 1 (0-5): 5\n",
            "Calificaci√≥n pel√≠cula 2 (0-5): 5\n",
            "\n",
            "Promedio de calificaciones: 5.00\n",
            "Recomendaci√≥n: Pel√≠culas de gladiadores para adultos\n",
            "\n",
            "--- Usuario #3 ---\n",
            "Edad: 555\n",
            "G√©nero favorito: romance\n",
            "¬øCu√°ntas pel√≠culas calific√≥ recientemente?: 1\n",
            "Calificaci√≥n pel√≠cula 1 (0-5): 0\n",
            "\n",
            "Promedio de calificaciones: 0.00\n",
            "Recomendaci√≥n: Drama, thriller o documentales\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " ***Ejercicio 3:*** Optimizaci√≥n de rutas de reparto\n",
        "Una empresa de mensajer√≠a quiere optimizar sus rutas diarias.\n",
        "Crea un programa que reciba las distancias (en km) y los tiempos estimados (en minutos) de varios trayectos.\n",
        "El sistema debe:\n",
        "\n",
        "Calcular la velocidad promedio de cada trayecto.\n",
        "\n",
        "Determinar cu√°l es la ruta m√°s eficiente (mayor velocidad promedio con menor distancia).\n",
        "\n",
        "Calcular el tiempo total del recorrido completo.\n",
        "Usa funciones para los c√°lculos, bucles para recorrer las rutas y condicionales para la selecci√≥n de la mejor opci√≥n, mostrando un informe final con las m√©tricas."
      ],
      "metadata": {
        "id": "5n5kqf0O6a1w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Constantes\n",
        "HORAS_EN_MINUTO = 60\n",
        "\n",
        "# Pedir n√∫mero de rutas\n",
        "num_rutas = int(input(\"¬øCu√°ntas rutas deseas ingresar?: \"))\n",
        "\n",
        "# listas para guardar datos\n",
        "distancias = []\n",
        "tiempos = []\n",
        "velocidades = []\n",
        "\n",
        "for i in range(num_rutas):\n",
        "    print(f\"\\nRuta {i+1}:\")\n",
        "    d = float(input(\"Distancia (km): \"))\n",
        "    t = float(input(\"Tiempo (minutos): \"))\n",
        "\n",
        "    v = d / (t / HORAS_EN_MINUTO)  # velocidad km/h\n",
        "\n",
        "    distancias.append(d)\n",
        "    tiempos.append(t)\n",
        "    velocidades.append(v)\n",
        "\n",
        "\n",
        "tiempo_total = sum(tiempos)\n",
        "max_vel = max(velocidades)\n",
        "indice_mejor = velocidades.index(max_vel)\n",
        "distancia_mejor = distancias[indice_mejor]\n",
        "\n",
        "#si hay empate, elige la menor distancia\n",
        "for i in range(num_rutas):\n",
        "    if velocidades[i] == max_vel and distancias[i] < distancia_mejor:\n",
        "        indice_mejor = i\n",
        "        distancia_mejor = distancias[i]\n",
        "\n",
        "\n",
        "print(\"\\n===== üìä RESULTADOS =====\")\n",
        "for i in range(num_rutas):\n",
        "    print(f\"Ruta {i+1}: {distancias[i]} km | {tiempos[i]} min | {velocidades[i]:.2f} km/h\")\n",
        "\n",
        "print(\"\\n===== üöÄ MEJOR RUTA =====\")\n",
        "print(f\"Ruta {indice_mejor + 1}: {velocidades[indice_mejor]:.2f} km/h con {distancias[indice_mejor]} km\")\n",
        "\n",
        "print(f\"\\n‚è±Ô∏è Tiempo total: {tiempo_total} minutos\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddD_bWLf6eor",
        "outputId": "40ec6a0b-ceff-4e73-85a5-4bcf63aa5e2f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "¬øCu√°ntas rutas deseas ingresar?: 4\n",
            "\n",
            "Ruta 1:\n",
            "Distancia (km): 5\n",
            "Tiempo (minutos): 45\n",
            "\n",
            "Ruta 2:\n",
            "Distancia (km): 5\n",
            "Tiempo (minutos): 50\n",
            "\n",
            "Ruta 3:\n",
            "Distancia (km): 45\n",
            "Tiempo (minutos): 60\n",
            "\n",
            "Ruta 4:\n",
            "Distancia (km): 5\n",
            "Tiempo (minutos): 60\n",
            "\n",
            "===== üìä RESULTADOS =====\n",
            "Ruta 1: 5.0 km | 45.0 min | 6.67 km/h\n",
            "Ruta 2: 5.0 km | 50.0 min | 6.00 km/h\n",
            "Ruta 3: 45.0 km | 60.0 min | 45.00 km/h\n",
            "Ruta 4: 5.0 km | 60.0 min | 5.00 km/h\n",
            "\n",
            "===== üöÄ MEJOR RUTA =====\n",
            "Ruta 3: 45.00 km/h con 45.0 km\n",
            "\n",
            "‚è±Ô∏è Tiempo total: 215.0 minutos\n"
          ]
        }
      ]
    }
  ]
}
